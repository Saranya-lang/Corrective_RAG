import streamlit as st
from langchain.vectorstores import FAISS
from langchain.embeddings import HuggingFaceEmbeddings
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

# Load FAISS index
embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
vectorstore = FAISS.load_local("faiss_index", embeddings,allow_dangerous_deserialization=True)
retriever = vectorstore.as_retriever(search_kwargs={"k": 3})

# Load Groq LLM
llm = ChatGroq(
    groq_api_key="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",  # Set this via env var or directly
    model_name="llama3-8b-8192",  # or "llama3-70b-8192"
)

# Prompt templates
initial_prompt = PromptTemplate.from_template(
    """Answer the question using the following context. Be concise.

Context:
{context}

Question: {question}

Answer:"""
)

correction_prompt = PromptTemplate.from_template(
    """You are a fact checker. The following answer was generated by an AI based on documents.

Check if the answer is accurate based on the context. If it‚Äôs wrong, correct it.
If it‚Äôs fine, return the original answer.

Context:
{context}

Original Answer: {original_answer}

Corrected Answer:"""
)

# Streamlit UI
st.title("üß† Corrective RAG with Groq")
query = st.text_input("Ask a question:")

if query:
    # Step 1: Retrieve documents
    docs = retriever.get_relevant_documents(query)
    context = "\n\n".join([doc.page_content for doc in docs])

    # Step 2: Initial answer
    init_chain = LLMChain(llm=llm, prompt=initial_prompt)
    initial_answer = init_chain.run({"context": context, "question": query})

    # Step 3: Correct it if needed
    corrector_chain = LLMChain(llm=llm, prompt=correction_prompt)
    corrected_answer = corrector_chain.run({
        "context": context,
        "original_answer": initial_answer
    })

    st.subheader("‚úÖ Final Answer")
    st.write(corrected_answer)

    with st.expander("üìÑ Sources"):
        for doc in docs:
            st.write(doc.page_content)

    with st.expander("üõ†Ô∏è Debug Info"):
        st.write("Initial Answer:")
        st.code(initial_answer)
